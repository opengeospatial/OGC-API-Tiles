openapi: 3.0.2
# 2019-07-05 Separated from more complete other examples previously done. It relays on OGC API Common example. Common components used in the OGC API family of standards. Deeply inspired in Clemens Portele work.
# 2019-07-10 "Collection" has a items object to describe the items link and eventually other properties. This makes this diferent form the original WFS3 examples
# 2019-07-14 Updated with the last WFS3 draft https://github.com/opengeospatial/WFS_FES/blob/master/core/openapi/bbox/ogcapi-features-1.yaml
info:
  title: OGC API Features Building Blocks
  description: |-
    Common components used in the OGC API features standards.
    Deeply inspired in Clemens Portele WFS3 work but depending on a OGC API Common document

    This document is also available in [GitHub](https://github.com/opengeospatial/OGC-API-Map-Tiles/tree/master/standard/openapi).

  version: "1.0.0"
  contact:
    name: Joan Maso
    email: joan.maso@uab.cat
  license:
    name: OGC License
    url: 'https://raw.githubusercontent.com/opengeospatial/OGC-API-Map-Tiles/master/LICENSE'
components:
  parameters:
    featureId:
      name: featureId
      in: path
      description: local identifier of a feature
      required: true
      schema:
        type: string
    properties:
      name: properties
      in: query
      description: |-
        The properties that should be included for each feature. The parameter
        value is a comma-separated list of property names.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
  schemas:
    collection-link:
      #This element is not directly linkable by other APIs because they probably will need to add other links to other resource types. Instead, it would be copied and enriched with more examples.
      type: object
      required:
        - links
      properties:
        links:
          type: array
          items:
            $ref: 'https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/link'
          example:
            - $ref: 'https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/examples/link-collection-this'
            - $ref: 'https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/examples/link-collection-describedBy'
            - $ref: '#/components/examples/link-collection-items'
    queryables:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/queryable-string'
          - $ref: '#/components/schemas/queryable-enum'
          - $ref: '#/components/schemas/queryable-number'
          - $ref: '#/components/schemas/queryable-boolean'
          - $ref: '#/components/schemas/queryable-date'
          - $ref: '#/components/schemas/queryable-dateTime'
    queryable:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: the property name for use in expressions
        description:
          type: string
          description: a description of the property
        required:
          type: boolean
          default: false
          description: indicator whether the property is always present in features
        mediaTypes:
          type: array
          description: |-
            In cases where a property is available only in a subset of the
            supported feature encodings, the list of the media types of the
            encodings can be specified.

            This capabilitiy is also needed for cases where the names of
            properties may differ between feature encodings. For example,
            identifiers in an XML/GML encoding may include a namespace,
            in GeoJSON or MVT this is not the case.

            There are other reasons, too. For example, the property identifier
            in a Shapefile may be different because of length restrictions.
          items:
            type: string
        type:
          type: string
          description: the data type of the property
          enum:
            - string
            - uri
            - enum
            - number
            - integer
            - date
            - dateTime
            - boolean
      discriminator:
        propertyName: type
        mapping:
          string: queryable-string
          enum: queryable-enum
          uri: queryable-string
          number: queryable-number
          integer: queryable-number
          date: queryable-date
          dateTime: queryable-dateTie
          boolean: queryable-boolean
    queryable-string:
      allOf:
      - $ref: '#/components/schemas/queryable'
      - type: object
        nullable: true
        properties:
          pattern:
            type: string
            description: a regular expression to validate the values of the property
      example:
        id: name
        description: the name of the vegetation area
        required: true
        type: string
        example: '[A-Z0-9]{5}'
    queryable-enum:
      allOf:
      - $ref: '#/components/schemas/queryable'
      - type: object
        required:
          - values
        properties:
          values:
            type: array
            nullable: true
            description: the list of values of the property
            items:
              type: string
      example:
        id: type
        description: the dominant charcteristic of vegetation area
        type: enum
        values: [ 'grassland', 'forest', 'farmland' ]
    queryable-number:
      allOf:
      - $ref: '#/components/schemas/queryable'
      - type: object
        nullable: true
        properties:
          range:
            type: array
            nullable: true
            minItems: 2
            maxItems: 2
            items:
              type: number
              nullable: true
            description: a range of valid values; open range can be expressed using `null`
      example:
        id: count
        description: the number of cattle
        type: integer
        range: [ 0 , null ]
    queryable-boolean:
      allOf:
      - $ref: '#/components/schemas/queryable'
      example:
        id: fenced
        description: indicator whether the area is walled or fenced
        type: boolean
    queryable-date:
      allOf:
      - $ref: '#/components/schemas/queryable'
      - type: object
        properties:
          range:
            type: array
            nullable: true
            minItems: 2
            maxItems: 2
            items:
              type: string
              format: date
              nullable: true
            description: a range of valid values; open range can be expressed using `null`
      example:
        id: inspectionDate
        description: the date of the last inspection
        type: date
        range: [ '2010-01-01', null ]
    queryable-dateTime:
      allOf:
      - $ref: '#/components/schemas/queryable'
      - type: object
        properties:
          range:
            type: array
            nullable: true
            minItems: 2
            maxItems: 2
            items:
              type: string
              format: date-time
              nullable: true
            description: a range of valid values; open range can be expressed using `null`
      example:
        id: lastUpdate
        description: the date of the last update of the feature
        type: dateTime
        range: [ '2018-01-01T00:00:00Z', null ]
    featureCollectionGeoJSON:
      type: object
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/featureGeoJSON'
        links:
          type: array
          items:
            $ref: 'https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/link'
        timeStamp:
          $ref: 'https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/timeStamp'
        numberMatched:
          type: integer
          minimum: 0
        numberReturned:
          type: integer
          minimum: 0
    featureGeoJSON:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/geometryGeoJSON'
        properties:
          type: object
          nullable: true
        id:
          oneOf:
            - type: string
            - type: integer
        links:
          type: array
          items:
            $ref: 'https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/link'
    geometryGeoJSON:
      oneOf:
      - $ref: "#/components/schemas/pointGeoJSON"
      - $ref: "#/components/schemas/multipointGeoJSON"
      - $ref: "#/components/schemas/linestringGeoJSON"
      - $ref: "#/components/schemas/multilinestringGeoJSON"
      - $ref: "#/components/schemas/polygonGeoJSON"
      - $ref: "#/components/schemas/multipolygonGeoJSON"
      - $ref: "#/components/schemas/geometrycollectionGeoJSON"
    geometryGeoJSONNoCollection:
      #This element should not exist (and use geometryGeoJSON) but has been created to avoid a stack overflow in the SwaggerHUB due to a circular reference.
      oneOf:
      - $ref: "#/components/schemas/pointGeoJSON"
      - $ref: "#/components/schemas/multipointGeoJSON"
      - $ref: "#/components/schemas/linestringGeoJSON"
      - $ref: "#/components/schemas/multilinestringGeoJSON"
      - $ref: "#/components/schemas/polygonGeoJSON"
      - $ref: "#/components/schemas/multipolygonGeoJSON"
      #- $ref: "#/components/schemas/geometrycollectionGeoJSON"
    geometrycollectionGeoJSON:
      type: object
      required:
        - type
        - geometries
      properties:
        type:
          type: string
          enum:
            - GeometryCollection
        geometries:
          type: array
          items:
            $ref: "#/components/schemas/geometryGeoJSONNoCollection"
    landingPage:
      type: object
      required:
        - links
      properties:
        title:
          type: string
          example: Buildings in Bonn
        description:
          type: string
          example: Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Features specification.
        links:
          type: array
          items:
            $ref: 'https://api.swaggerhub.com/domains/UAB-CREAF/ogc-api-common/1.0.0#/components/schemas/link'
    linestringGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          minItems: 2
          items:
            type: array
            minItems: 2
            items:
              type: number
    multilinestringGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiLineString
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: array
              minItems: 2
              items:
                type: number
    multipointGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: number
    multipolygonGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              minItems: 4
              items:
                type: array
                minItems: 2
                items:
                  type: number
    pointGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          type: array
          minItems: 2
          items:
            type: number
    polygonGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Polygon
          example: Polygon
        coordinates:
          type: array
          items:
            type: array
            minItems: 4
            items:
              type: array
              minItems: 2
              items:
                type: number
          example:      
          - - - 35.99601746
              - 32.50426061
            - - 36.08110064
              - 32.50426061
            - - 36.08110064
              - 32.57551892
            - - 35.99601746
              - 32.57551892
            - - 35.99601746
              - 32.50426061
  examples:
    link-collection-items:
      href: 'http://data.example.com/collections/buildings/items'
      rel: http://www.opengis.net/def/rel/ogc/1.0/items
      title: Retrieve the items of the buildings collection
      type: 'application/geo+json'